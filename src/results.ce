Result : error() {
    register(res),
    success(.child == ParseResult ? node : .child == RuntimeResult ? val),
    failure(error{error}) = .value
},

ParseResult = Result + () : Result(), node{} {
    register(res) {
        ~valueof(res, ParseResult) ? return(res),
        res.error ? error = res.error,
        return(res)
    },
    success(node{node}) = .object,
    dump = f"ParseResult({error=}, {node=})",
    ! = (error ==)?,
    ==(other) = ~valueof(other, ParseResult) ? b0 : (error == other.error)*(node == other.node)
},

RuntimeResult = Result + () : Result(), val{} {
    register(res) {
        res.error ? error = res.error,
        return(res.val)
    },
    success(val{val}) = .value
}