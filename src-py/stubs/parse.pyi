from enum import auto
from typing import Callable, List, Self, overload

from errors import Error
from nodes import Node
from tokens import Token

class ParseResult:
    def __init__(self) -> None: ...
    @overload
    def register(self, res: Self) -> Node: ...
    @overload
    def register(self, res: Node) -> Node: ...
    def success(self, node: Node) -> Self: ...
    def failure(self, error: Error) -> Self: ...
    def __repr__(self) -> str: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class Parser:
    def __init__(self, tokens: List[Token]) -> None: ...
    def advance(self) -> Token: ...
    def factor(self) -> ParseResult: ...
    def term(self) -> ParseResult: ...
    def expr(self) -> ParseResult: ...
    def bin_op(
        self, func: Callable[[Self], ParseResult], ops: List[auto]
    ) -> ParseResult: ...
